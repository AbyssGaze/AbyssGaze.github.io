<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>AbyssGaze</title>
  <subtitle>pcl segmentations, slam,</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-01-19T13:37:06.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Y.Chen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用Opencv创建tag板</title>
    <link href="http://yoursite.com/2017/01/19/%E4%BD%BF%E7%94%A8opencv%E5%88%9B%E5%BB%BAtag%E6%9D%BF/"/>
    <id>http://yoursite.com/2017/01/19/使用opencv创建tag板/</id>
    <published>2017-01-19T13:37:06.000Z</published>
    <updated>2017-01-19T13:37:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>由于要完成3D多视角下数据集的搭建，所以要尽兴多视角下，相机的位姿估计。由于生活中部分物体的纹理信息并不丰富，所以使用sift等特征点然后LM求解并不可靠，而在一侧放置标定板，会因为视角的变化，导致部分被遮挡，所以此处使用了一圈tag来进行位姿估计，在创建board时，犯了一些错误，此处也会将相应的视线代码贴出来，仅供参考。</p>
<p>＃ marker的生成<br>单独生成对应的marker，具体的函数如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Ptr&lt;aruco::Dictionary&gt; dictionary = aruco::getPredefinedDictionary(cv::aruco::DICT_6X6_250);</div><div class="line"></div><div class="line">Mat markerImage;</div><div class="line">aruco::drawMarker(dictionary, 10, 200, markerImage);</div></pre></td></tr></table></figure></p>
<p>＃ board的生成<br>虽然能生成单个的marker但是想要生成多个marker联合的board，可以运行下面的代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Ptr&lt;aruco::Dictionary&gt; dictionary = aruco::getPredefinedDictionary(cv::aruco::DICT_6X6_250);</div><div class="line"></div><div class="line">Ptr&lt;aruco::GridBoard&gt; board = aruco::GridBoard::create(5, 7, 0.04, 0.01, dictionary);</div><div class="line"></div><div class="line">board-&gt;draw( Size(600, 500), boardImage, 40, 1);</div><div class="line">imwrite(<span class="string">"../data/board.png"</span>, boardImage);</div></pre></td></tr></table></figure></p>
<p>＃ 自定义board的生成<br>有时候为了更好地完成任务，需要自己对board进行定义，所以使用了自定义的方法生成一圈tag，<img src="./images/board1.png" alt="board"><br>在生成自定义board的过程中，犯了很多傻傻的错误，总是提示<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">OpenCV Error: Assertion failed (sidePixels &gt;= (markerSize + 2*borderBits)) <span class="keyword">in</span> drawMarker</div></pre></td></tr></table></figure></p>
<p>一直在苦恼时哪个地方的参数没写对吗？结果发现是建立四个点的时候，不是逆时针，因为aruco::Board::create要求是逆时针建立四个点，所以改过来就好了。其中可以更改的相关参数如：［length］marker的宽度，aruco::drawPlanarBoard(board, Size(3000, 3000), boardImage, 70, 1);中70为边缘的宽度，下面就可以生成对应的board了。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">#include &lt;opencv2/opencv.hpp&gt;</span></div><div class="line"><span class="comment">#include &lt;opencv2/aruco.hpp&gt;</span></div><div class="line"></div><div class="line"><span class="comment">#include &lt;vector&gt;</span></div><div class="line"><span class="comment">#include &lt;iostream&gt;</span></div><div class="line"></div><div class="line">using namespace std;</div><div class="line">using namespace cv;</div><div class="line"></div><div class="line">int <span class="function"><span class="title">main</span></span>()&#123;</div><div class="line">	//create_marker</div><div class="line">	Ptr&lt;aruco::Dictionary&gt; dictionary = aruco::getPredefinedDictionary(cv::aruco::DICT_6X6_250);</div><div class="line">	</div><div class="line">	//marker length</div><div class="line">	double length = 0.065;</div><div class="line">	vector&lt;vector&lt;Point3f&gt; &gt; marker_corner_vec;</div><div class="line">	vector&lt;int&gt; ids_vec;</div><div class="line">	//marker left up corner coordinate</div><div class="line">	vector&lt;double&gt; corners_x = &#123;0, 0.08, 0.16, 0.24, 0.32, 0.40, 0.48, 0, 0.08, 0.16, 0.24, 0.32, 0.40, 0.48, 0, 0, 0, 0, 0, 0.48, 0.48, 0.48, 0.48, 0.48&#125;;</div><div class="line">	vector&lt;double&gt; corners_y = &#123;0, 0, 0, 0, 0, 0, 0, 0.48, 0.48, 0.48, 0.48, 0.48, 0.48, 0.48, 0.08, 0.16, 0.24, 0.32, 0.40, 0.08, 0.16, 0.24, 0.32, 0.40&#125;;</div><div class="line"></div><div class="line">	//CCW order is important</div><div class="line">	//here we order the four corners <span class="keyword">for</span>:left up, left bottom, right bottom and right up</div><div class="line">	<span class="keyword">for</span>(unsigned i = 0; i &lt; corners_x.size(); ++i)&#123;</div><div class="line">		vector&lt;Point3f&gt; marker_corners(4, Point3f(0, 0, 0));</div><div class="line">		marker_corners[0].x = corners_x[i];</div><div class="line">		marker_corners[0].y = corners_y[i];</div><div class="line">		marker_corners[1].x = corners_x[i];</div><div class="line">		marker_corners[1].y = corners_y[i] + length;</div><div class="line">		marker_corners[2].x = corners_x[i] + length;</div><div class="line">		marker_corners[2].y = corners_y[i] + length;	</div><div class="line">		marker_corners[3].x = corners_x[i] + length;</div><div class="line">		marker_corners[3].y = corners_y[i];</div><div class="line">		marker_corner_vec.push_back(marker_corners);</div><div class="line">		ids_vec.push_back(i + 1);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	// create the board</div><div class="line">	Ptr&lt;aruco::Board&gt; board = aruco::Board::create(marker_corner_vec, dictionary, ids_vec);</div><div class="line">	Mat boardImage;</div><div class="line"></div><div class="line">	//translate the board to mat</div><div class="line">	aruco::drawPlanarBoard(board, Size(3000, 3000), boardImage, 70, 1);</div><div class="line"></div><div class="line">	//write the mat into image</div><div class="line">	imwrite(<span class="string">"../data/board.png"</span>, boardImage);</div><div class="line">	// imshow(<span class="string">"artag"</span>, boardImage);</div><div class="line">	<span class="built_in">wait</span>Key(0);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>生成了对应的</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于要完成3D多视角下数据集的搭建，所以要尽兴多视角下，相机的位姿估计。由于生活中部分物体的纹理信息并不丰富，所以使用sift等特征点然后LM求解并不可靠，而在一侧放置标定板，会因为视角的变化，导致部分被遮挡，所以此处使用了一圈tag来进行位姿估计，在创建board时，犯了
    
    </summary>
    
      <category term="位姿估计" scheme="http://yoursite.com/categories/%E4%BD%8D%E5%A7%BF%E4%BC%B0%E8%AE%A1/"/>
    
    
      <category term="opencv" scheme="http://yoursite.com/tags/opencv/"/>
    
      <category term="aruco" scheme="http://yoursite.com/tags/aruco/"/>
    
      <category term="create" scheme="http://yoursite.com/tags/create/"/>
    
  </entry>
  
  <entry>
    <title>Mac下hexo搭建github博客</title>
    <link href="http://yoursite.com/2017/01/13/mac%E4%B8%8Bhexo%E6%90%AD%E5%BB%BAgithub%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2017/01/13/mac下hexo搭建github博客/</id>
    <published>2017-01-13T08:12:39.000Z</published>
    <updated>2017-01-13T09:36:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>之所以想写博客，主要是为了记录研一和研二相关的研究，以及遇到的相关问题的解决方法，以便和大家一起交流学习，也是一个反刍的过程，搭建hexo下的博客很方便，在此我的第一篇博客便是如何搭建github静态博客。</p>
<h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p>搭建好<a href="https://hexo.io/docs/" target="_blank" rel="external">Hexo</a>的博客，需要依赖于Node.js和Git，所以在安装hexo前需要先安装Node.js和Git，</p>
<h2 id="1-安装-Node-js"><a href="#1-安装-Node-js" class="headerlink" title="1.安装 Node.js"></a>1.安装 Node.js</h2><p><a href="https://nodejs.org/en/" target="_blank" rel="external">Node.js</a>下载的是v6.9.4 LTS版本，一路点下来就完美地完成安装。</p>
<h2 id="2-安装-Git"><a href="#2-安装-Git" class="headerlink" title="2.安装 Git"></a>2.安装 Git</h2><p>默认看到此篇博客的已经在电脑上安装了git，当然，没有安装的童鞋可以安装homebrew然后安装git，或者直接安装Xcode，在此介绍homebrew下安装git的方法。</p>
<h2 id="3-安装-Hexo"><a href="#3-安装-Hexo" class="headerlink" title="3.安装 Hexo"></a>3.安装 Hexo</h2><p>安装好Node.js和git后就可以安装hexo，在terminal中执行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo npm install -g hexo</div></pre></td></tr></table></figure></p>
<p>必须输入sudo，以获取权限进行读写操作。</p>
<h1 id="搭建博客"><a href="#搭建博客" class="headerlink" title="搭建博客"></a>搭建博客</h1><h2 id="hexo初始化"><a href="#hexo初始化" class="headerlink" title="hexo初始化"></a>hexo初始化</h2><p>cd到你放置博客的目录下，完成博客文件夹的初始化，其中blog是我们的所有博客在的路径，可以更改为自己喜欢的名称。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo init blog</div></pre></td></tr></table></figure>
<p>或者直接cd到目录下，指定当前目录为初始化目录，在终端执行：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo init</div></pre></td></tr></table></figure>
<p>然后在blog文件夹下，安装npm：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install</div></pre></td></tr></table></figure></p>
<p>开启对应的服务器：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo s</div></pre></td></tr></table></figure></p>
<h1 id="更改你的配置文件"><a href="#更改你的配置文件" class="headerlink" title="更改你的配置文件"></a>更改你的配置文件</h1><p>在hexo初始化后，可以看到对应的路径下有_config.yml文件，这是你的博客配置文件，需要更改的配置如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">title: AbyssGaze</div><div class="line">subtitle: </div><div class="line">description: 热爱古典艺术的程序猿</div><div class="line">author: Y.Chen</div><div class="line">language: zh-Hans <span class="comment">#语言</span></div><div class="line">timezone: Asia/Shanghai</div></pre></td></tr></table></figure></p>
<h1 id="关联github"><a href="#关联github" class="headerlink" title="关联github"></a>关联github</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  <span class="built_in">type</span>: git</div><div class="line">  repository: git@github.com:AbyssGaze/AbyssGaze.github.io.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之所以想写博客，主要是为了记录研一和研二相关的研究，以及遇到的相关问题的解决方法，以便和大家一起交流学习，也是一个反刍的过程，搭建hexo下的博客很方便，在此我的第一篇博客便是如何搭建github静态博客。&lt;/p&gt;
&lt;h1 id=&quot;环境搭建&quot;&gt;&lt;a href=&quot;#环境搭建&quot;
    
    </summary>
    
      <category term="随笔" scheme="http://yoursite.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
      <category term="mac" scheme="http://yoursite.com/tags/mac/"/>
    
      <category term="博客" scheme="http://yoursite.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>利用ZED完成visual Odometry</title>
    <link href="http://yoursite.com/2017/01/12/ZED%E5%AE%8C%E6%88%90VO/"/>
    <id>http://yoursite.com/2017/01/12/ZED完成VO/</id>
    <published>2017-01-12T15:46:36.000Z</published>
    <updated>2017-01-13T09:27:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>之所以想写博客，主要是为了记录研一和研二相关的研究，以及遇到的相关问题的解决方法，以便和大家一起交流学习，也是一个反刍的过程。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之所以想写博客，主要是为了记录研一和研二相关的研究，以及遇到的相关问题的解决方法，以便和大家一起交流学习，也是一个反刍的过程。&lt;/p&gt;

    
    </summary>
    
    
      <category term="ZED" scheme="http://yoursite.com/tags/ZED/"/>
    
  </entry>
  
</feed>
