<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>AbyssGaze</title>
  <subtitle>pcl segmentations, slam, industry visual</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-01-23T14:31:34.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Y.Chen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Pcl点云中长方体的位姿估计</title>
    <link href="http://yoursite.com/2017/01/23/pcl%E7%82%B9%E4%BA%91%E4%B8%AD%E9%95%BF%E6%96%B9%E4%BD%93%E7%9A%84%E4%BD%8D%E5%A7%BF%E4%BC%B0%E8%AE%A1/"/>
    <id>http://yoursite.com/2017/01/23/pcl点云中长方体的位姿估计/</id>
    <published>2017-01-23T13:35:30.000Z</published>
    <updated>2017-01-23T14:31:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>由于之前做了物体的分割，要用于机械臂的抓取，所以绕不开物体的位姿估计，所以本篇主要讲解的完成分割后如何进行长方体的位姿估计。</p>
<p>由于使用的分割算法是从低层次到高层次，所以在分割的结果蕴含了物体各个面的组成信息，并知道了各个面的大小，当然不知道的情况也可以进行处理，之后会进行相关阐述。</p>
<h1 id="已知物体各个面的组成"><a href="#已知物体各个面的组成" class="headerlink" title="已知物体各个面的组成"></a>已知物体各个面的组成</h1><p>由于已经知道了各个面的组成信息，首先选择最大面，计算得到对应的法向量，使其物体的z轴向量，进而选择次大面，计算得到对应的法向量，使其为物体的y轴向量，进而对其进行一系列的旋转平移操作，完成物体的尺寸和位姿变换关系的计算：<br>（1）首先计算得到物体z轴与相机坐标系下的z轴夹角为$\theta$，将其在中心点旋转$\theta$使物体中心坐标系下的z轴与相机坐标系的z轴平行;<br>（2）将物体中心平移与相机中心重合；<br>（3）计算得到物体y轴与相机坐标系下的y轴夹角为$\beta$，将其在中心点旋转$\beta$使物体中心坐标系下的y轴与相机坐标系的y轴重合。<br>由此可以得到与相机坐标系$Cor_cam与物体坐标系$Cor_obj之间的位姿变化关系中平移向量为，旋转矩阵为：<br>$$ R = \begin{bmatrix} \cos\theta &amp; -\sin\theta &amp; 0 \\ \sin\theta &amp; -\cos\theta &amp; 0 \\ 0 &amp; 0 &amp; 1\end{bmatrix} \begin{bmatrix} \cos\beta &amp; 0 &amp; -\sin\beta \\ 0 &amp; 1 &amp; 0 \\ \sin\beta &amp; \cos\beta &amp; 0 \end{bmatrix} $$</p>
<div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="/images/rotate1.png" width="50%" height="50%"></div><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="/images/rotate2.png" width="50%" height="50%"></div><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="/images/rotate3.png" width="50%" height="50%"></div></div><div class="group-picture-row"><div class="group-picture-column" style="width: 100%;"><img src="/images/rotate4.png" width="50%" height="50%"></div></div><div class="group-picture-row"></div></div></div>
<h1 id="不知道物体各个面的组成"><a href="#不知道物体各个面的组成" class="headerlink" title="不知道物体各个面的组成"></a>不知道物体各个面的组成</h1><p>当原始输入的数据不知道对应面的主成分，此时就需要对应的pca来进行最大面的拟合，然后再进行次小面的计算，然后按照上面的方法完成物体的位姿估计即可。</p>
<p>源码要回实验室了再上传到博客。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于之前做了物体的分割，要用于机械臂的抓取，所以绕不开物体的位姿估计，所以本篇主要讲解的完成分割后如何进行长方体的位姿估计。&lt;/p&gt;
&lt;p&gt;由于使用的分割算法是从低层次到高层次，所以在分割的结果蕴含了物体各个面的组成信息，并知道了各个面的大小，当然不知道的情况也可以进行处理
    
    </summary>
    
      <category term="位姿估计" scheme="http://yoursite.com/categories/%E4%BD%8D%E5%A7%BF%E4%BC%B0%E8%AE%A1/"/>
    
    
      <category term="pose estimation" scheme="http://yoursite.com/tags/pose-estimation/"/>
    
      <category term="pcl" scheme="http://yoursite.com/tags/pcl/"/>
    
      <category term="PCA" scheme="http://yoursite.com/tags/PCA/"/>
    
  </entry>
  
  <entry>
    <title>使用Opencv创建tag板</title>
    <link href="http://yoursite.com/2017/01/20/%E4%BD%BF%E7%94%A8opencv%E5%88%9B%E5%BB%BAtag%E6%9D%BF/"/>
    <id>http://yoursite.com/2017/01/20/使用opencv创建tag板/</id>
    <published>2017-01-19T16:13:45.000Z</published>
    <updated>2017-01-19T17:18:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>由于要完成3D多视角下数据集的搭建，所以要尽兴多视角下，相机的位姿估计。由于生活中部分物体的纹理信息并不丰富，所以使用sift等特征点然后LM求解并不可靠，而在一侧放置标定板，会因为视角的变化，导致部分被遮挡，所以此处使用了一圈tag来进行位姿估计，在创建board时，犯了一些错误，此处也会将相应的视线代码贴出来，仅供参考。</p>
<h1 id="marker的生成"><a href="#marker的生成" class="headerlink" title="marker的生成"></a>marker的生成</h1><p>单独生成对应的marker，具体的函数如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Ptr&lt;aruco::Dictionary&gt; dictionary = aruco::getPredefinedDictionary(cv::aruco::DICT_6X6_250);</div><div class="line"></div><div class="line">Mat markerImage;</div><div class="line">aruco::drawMarker(dictionary, <span class="number">10</span>, <span class="number">200</span>, markerImage);</div></pre></td></tr></table></figure></p>
<h1 id="board的生成"><a href="#board的生成" class="headerlink" title="board的生成"></a>board的生成</h1><p>虽然能生成单个的marker但是想要生成多个marker联合的board，可以运行下面的代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Ptr&lt;aruco::Dictionary&gt; dictionary = aruco::getPredefinedDictionary(cv::aruco::DICT_6X6_250);</div><div class="line"></div><div class="line">Ptr&lt;aruco::GridBoard&gt; board = aruco::GridBoard::create(<span class="number">5</span>, <span class="number">7</span>, <span class="number">0.04</span>, <span class="number">0.01</span>, dictionary);</div><div class="line"></div><div class="line">board-&gt;draw( Size(<span class="number">600</span>, <span class="number">500</span>), boardImage, <span class="number">40</span>, <span class="number">1</span>);</div><div class="line">imwrite(<span class="string">"../data/board.png"</span>, boardImage);</div></pre></td></tr></table></figure></p>
<h1 id="自定义board的生成"><a href="#自定义board的生成" class="headerlink" title="自定义board的生成"></a>自定义board的生成</h1><p>有时候为了更好地完成任务，需要自己对board进行定义，所以使用了自定义的方法生成一圈tag， <img src="/images/board.png" title="board" width="50%" height="50%" align="center/"><br>在生成自定义board的过程中，犯了很多傻傻的错误，总是提示<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">OpenCV Error: Assertion failed (sidePixels &gt;= (markerSize + 2*borderBits)) <span class="keyword">in</span> drawMarker</div></pre></td></tr></table></figure></p>
<p>一直在苦恼时哪个地方的参数没写对吗？结果发现是建立四个点的时候，不是逆时针，因为<code>aruco::Board::create</code>要求是逆时针建立四个点，所以改过来就好了。其中可以更改的相关参数如：<code>length</code> marker的宽度，    aruco::drawPlanarBoard(board, Size(3000, 3000), boardImage, 70, 1); 中70为边缘的宽度，下面就可以生成对应的board了。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/opencv.hpp&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/aruco.hpp&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="comment">//create_marker</span></div><div class="line">	Ptr&lt;aruco::Dictionary&gt; dictionary = aruco::getPredefinedDictionary(cv::aruco::DICT_6X6_250);</div><div class="line">	</div><div class="line">	<span class="comment">//marker length</span></div><div class="line">	<span class="keyword">double</span> length = <span class="number">0.065</span>;</div><div class="line">	<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;Point3f&gt; &gt; marker_corner_vec;</div><div class="line">	<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ids_vec;</div><div class="line">	<span class="comment">//marker left up corner coordinate</span></div><div class="line">	<span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt; corners_x = &#123;<span class="number">0</span>, <span class="number">0.08</span>, <span class="number">0.16</span>, <span class="number">0.24</span>, <span class="number">0.32</span>, <span class="number">0.40</span>, <span class="number">0.48</span>, <span class="number">0</span>, <span class="number">0.08</span>, <span class="number">0.16</span>, <span class="number">0.24</span>, <span class="number">0.32</span>, <span class="number">0.40</span>, <span class="number">0.48</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.48</span>, <span class="number">0.48</span>, <span class="number">0.48</span>, <span class="number">0.48</span>, <span class="number">0.48</span>&#125;;</div><div class="line">	<span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt; corners_y = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.48</span>, <span class="number">0.48</span>, <span class="number">0.48</span>, <span class="number">0.48</span>, <span class="number">0.48</span>, <span class="number">0.48</span>, <span class="number">0.48</span>, <span class="number">0.08</span>, <span class="number">0.16</span>, <span class="number">0.24</span>, <span class="number">0.32</span>, <span class="number">0.40</span>, <span class="number">0.08</span>, <span class="number">0.16</span>, <span class="number">0.24</span>, <span class="number">0.32</span>, <span class="number">0.40</span>&#125;;</div><div class="line"></div><div class="line">	<span class="comment">//CCW order is important</span></div><div class="line">	<span class="comment">//here we order the four corners for:left up, left bottom, right bottom and right up</span></div><div class="line">	<span class="keyword">for</span>(<span class="keyword">unsigned</span> i = <span class="number">0</span>; i &lt; corners_x.size(); ++i)&#123;</div><div class="line">		<span class="built_in">vector</span>&lt;Point3f&gt; marker_corners(<span class="number">4</span>, Point3f(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>));</div><div class="line">		marker_corners[<span class="number">0</span>].x = corners_x[i];</div><div class="line">		marker_corners[<span class="number">0</span>].y = corners_y[i];</div><div class="line">		marker_corners[<span class="number">1</span>].x = corners_x[i];</div><div class="line">		marker_corners[<span class="number">1</span>].y = corners_y[i] + length;</div><div class="line">		marker_corners[<span class="number">2</span>].x = corners_x[i] + length;</div><div class="line">		marker_corners[<span class="number">2</span>].y = corners_y[i] + length;	</div><div class="line">		marker_corners[<span class="number">3</span>].x = corners_x[i] + length;</div><div class="line">		marker_corners[<span class="number">3</span>].y = corners_y[i];</div><div class="line">		marker_corner_vec.push_back(marker_corners);</div><div class="line">		ids_vec.push_back(i + <span class="number">1</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">// create the board</span></div><div class="line">	Ptr&lt;aruco::Board&gt; board = aruco::Board::create(marker_corner_vec, dictionary, ids_vec);</div><div class="line">	Mat boardImage;</div><div class="line"></div><div class="line">	<span class="comment">//translate the board to mat</span></div><div class="line">	aruco::drawPlanarBoard(board, Size(<span class="number">3000</span>, <span class="number">3000</span>), boardImage, <span class="number">70</span>, <span class="number">1</span>);</div><div class="line"></div><div class="line">	<span class="comment">//write the mat into image</span></div><div class="line">	imwrite(<span class="string">"../data/board.png"</span>, boardImage);</div><div class="line">	<span class="comment">// imshow("artag", boardImage);</span></div><div class="line">	waitKey(<span class="number">0</span>);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>生成了对应的board。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于要完成3D多视角下数据集的搭建，所以要尽兴多视角下，相机的位姿估计。由于生活中部分物体的纹理信息并不丰富，所以使用sift等特征点然后LM求解并不可靠，而在一侧放置标定板，会因为视角的变化，导致部分被遮挡，所以此处使用了一圈tag来进行位姿估计，在创建board时，犯了
    
    </summary>
    
      <category term="位姿估计" scheme="http://yoursite.com/categories/%E4%BD%8D%E5%A7%BF%E4%BC%B0%E8%AE%A1/"/>
    
    
      <category term="opencv" scheme="http://yoursite.com/tags/opencv/"/>
    
      <category term="aruco" scheme="http://yoursite.com/tags/aruco/"/>
    
      <category term="create" scheme="http://yoursite.com/tags/create/"/>
    
  </entry>
  
</feed>
